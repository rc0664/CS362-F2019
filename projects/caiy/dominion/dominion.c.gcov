        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:40
        -:    0:Programs:40
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 78792 returned 100% blocks executed 83%
    78792:    8:int compare(const void* a, const void* b) {
    78792:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        return 1;
    78792:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
    18760:   12:        return -1;
    60032:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 1299 returned 99% blocks executed 97%
     1299:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
     1299:   44:    SelectStream(1);
call    0 returned 100%
     1299:   45:    PutSeed((long)randomSeed);
call    0 returned 99%
        -:   46:
        -:   47:    //check number of players
     1298:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        -:   49:    {
       33:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
     1265:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
    13915:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   139150:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   126500:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
     1265:   73:    if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
      449:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
      816:   77:    else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
      410:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
      406:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
     1265:   87:    if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
      449:   89:        state->supplyCount[estate] = 8;
      449:   90:        state->supplyCount[duchy] = 8;
      449:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
      816:   95:        state->supplyCount[estate] = 12;
      816:   96:        state->supplyCount[duchy] = 12;
      816:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
     1265:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
     1265:  102:    state->supplyCount[silver] = 40;
     1265:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
    26565:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   219269:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
   205096:  110:            if (kingdomCards[j] == i)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
    11127:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
        -:  114:                {
     4776:  115:                    if (numPlayers == 2) {
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
      849:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
     1539:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
     8739:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
    11127:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
   193969:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
     5017:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  141:    {
     3752:  142:        state->deckCount[i] = 0;
    15008:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:        {
    11256:  145:            state->deck[i][j] = estate;
    11256:  146:            state->deckCount[i]++;
        -:  147:        }
    30016:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:        {
    26264:  150:            state->deck[i][j] = copper;
    26264:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
     5017:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  157:    {
     3752:  158:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
     5017:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  166:    {
        -:  167:        //initialize hand size to zero
     3752:  168:        state->handCount[i] = 0;
     3752:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
    35420:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
    34155:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
     1265:  184:    state->outpostPlayed = 0;
     1265:  185:    state->phase = 0;
     1265:  186:    state->numActions = 1;
     1265:  187:    state->numBuys = 1;
     1265:  188:    state->playedCardCount = 0;
     1265:  189:    state->whoseTurn = 0;
     1265:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
     7590:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     6325:  195:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:    }
        -:  197:
     1265:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
     1265:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 3752 returned 100% blocks executed 94%
     3752:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
     3752:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
     3752:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:        return -1;
     3752:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
    45024:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    37520:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    37520:  218:        newDeck[newDeckPos] = state->deck[player][card];
    37520:  219:        newDeckPos++;
   126950:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
    89430:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
    37520:  223:        state->deckCount[player]--;
        -:  224:    }
    41272:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    37520:  226:        state->deck[player][i] = newDeck[i];
    37520:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
     3752:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
call    0 never executed
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:
    #####:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 975 returned 100% blocks executed 100%
      975:  313:int numHandCards(struct gameState *state) {
      975:  314:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 1193 returned 100% blocks executed 100%
     1193:  322:int supplyCount(int card, struct gameState *state) {
     1193:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 2265 returned 100% blocks executed 100%
     2265:  348:int whoseTurn(struct gameState *state) {
     2265:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 7761 returned 100% blocks executed 38%
     7761:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
     7761:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
    #####:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
    #####:  576:        state->deckCount[player] = state->discardCount[player];
    #####:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
    #####:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
    #####:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
    #####:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
    #####:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
    #####:  597:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
     7761:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
     7761:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
     7761:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7761:  614:        state->deckCount[player]--;
     7761:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
     7761:  618:    return 0;
        -:  619:}
        -:  620:
function getCost called 0 returned 0% blocks executed 0%
    #####:  621:int getCost(int cardNumber)
        -:  622:{
    #####:  623:    switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
    #####:  634:        return 0;
        -:  635:    case silver:
    #####:  636:        return 3;
        -:  637:    case gold:
    #####:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        -:  682:}
        -:  683:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
    #####:  691:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
    #####:  694:    int tributeRevealedCards[2] = {-1, -1};
        -:  695:    int temphand[MAX_HAND];// moved above the if statement
    #####:  696:    int drawntreasure=0;
        -:  697:    int cardDrawn;
    #####:  698:    int z = 0;// this is the counter for the temp hand
    #####:  699:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  700:        nextPlayer = 0;
        -:  701:    }
        -:  702:
        -:  703:
        -:  704:    //uses switch to select card and perform actions
    #####:  705:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  706:    {
        -:  707:    case baron:
    #####:  708:      return case_baron(currentPlayer, choice1, *state);
call    0 never executed
        -:  709:    case minion:
    #####:  710:      return case_minion(currentPlayer, handPos, choice1, choice2,  *state);
call    0 never executed
        -:  711:    case ambassador:
    #####:  712:      return case_ambassador(currentPlayer, choice1,choice2, handPos, *state);
call    0 never executed
        -:  713:    case tribute:
    #####:  714:      return case_tribute(currentPlayer, nextPlayer, *state, tributeRevealedCards);
call    0 never executed
        -:  715:    case mine:
    #####:  716:      return case_mine(currentPlayer, choice1, choice2, handPos, *state);
call    0 never executed
        -:  717:    case adventurer:
    #####:  718:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  719:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  720:                shuffle(currentPlayer, state);
call    0 never executed
        -:  721:            }
    #####:  722:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  723:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  724:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  725:                drawntreasure++;
        -:  726:            else {
    #####:  727:                temphand[z]=cardDrawn;
    #####:  728:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  729:                z++;
        -:  730:            }
        -:  731:        }
    #####:  732:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  733:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  734:            z=z-1;
        -:  735:        }
    #####:  736:        return 0;
        -:  737:
        -:  738:    case council_room:
        -:  739:        //+4 Cards
    #####:  740:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  741:        {
    #####:  742:            drawCard(currentPlayer, state);
call    0 never executed
        -:  743:        }
        -:  744:
        -:  745:        //+1 Buy
    #####:  746:        state->numBuys++;
        -:  747:
        -:  748:        //Each other player draws a card
    #####:  749:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  750:        {
    #####:  751:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  752:            {
    #####:  753:                drawCard(i, state);
call    0 never executed
        -:  754:            }
        -:  755:        }
        -:  756:
        -:  757:        //put played card in played card pile
    #####:  758:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  759:
    #####:  760:        return 0;
        -:  761:
        -:  762:    case feast:
        -:  763:        //gain card with cost up to 5
        -:  764:        //Backup hand
    #####:  765:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  766:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  767:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  768:        }
        -:  769:        //Backup hand
        -:  770:
        -:  771:        //Update Coins for Buy
    #####:  772:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  773:        x = 1;//Condition to loop on
    #####:  774:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  775:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  776:                if (DEBUG)
        -:  777:                    printf("None of that card left, sorry!\n");
        -:  778:
        -:  779:                if (DEBUG) {
        -:  780:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  781:                }
        -:  782:            }
    #####:  783:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  784:                printf("That card is too expensive!\n");
call    0 never executed
        -:  785:
        -:  786:                if (DEBUG) {
        -:  787:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  788:                }
        -:  789:            }
        -:  790:            else {
        -:  791:
        -:  792:                if (DEBUG) {
        -:  793:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  794:                }
        -:  795:
    #####:  796:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  797:                x = 0;//No more buying cards
        -:  798:
        -:  799:                if (DEBUG) {
        -:  800:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:                }
        -:  802:
        -:  803:            }
        -:  804:        }
        -:  805:
        -:  806:        //Reset Hand
    #####:  807:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  808:            state->hand[currentPlayer][i] = temphand[i];
    #####:  809:            temphand[i] = -1;
        -:  810:        }
        -:  811:        //Reset Hand
        -:  812:
    #####:  813:        return 0;
        -:  814:
        -:  815:    case gardens:
    #####:  816:        return -1;
        -:  817:
        -:  818:   
        -:  819:
        -:  820:    case remodel:
    #####:  821:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  822:
    #####:  823:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  824:        {
    #####:  825:            return -1;
        -:  826:        }
        -:  827:
    #####:  828:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  829:
        -:  830:        //discard card from hand
    #####:  831:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  832:
        -:  833:        //discard trashed card
    #####:  834:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  835:        {
    #####:  836:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  837:            {
    #####:  838:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  839:                break;
        -:  840:            }
        -:  841:        }
        -:  842:
        -:  843:
    #####:  844:        return 0;
        -:  845:
        -:  846:    case smithy:
        -:  847:        //+3 Cards
    #####:  848:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  849:        {
    #####:  850:            drawCard(currentPlayer, state);
call    0 never executed
        -:  851:        }
        -:  852:
        -:  853:        //discard card from hand
    #####:  854:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  855:        return 0;
        -:  856:
        -:  857:    case village:
        -:  858:        //+1 Card
    #####:  859:        drawCard(currentPlayer, state);
call    0 never executed
        -:  860:
        -:  861:        //+2 Actions
    #####:  862:        state->numActions = state->numActions + 2;
        -:  863:
        -:  864:        //discard played card from hand
    #####:  865:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  866:        return 0;
        -:  867:
        -:  868: 
        -:  869:
        -:  870:    case great_hall:
        -:  871:        //+1 Card
    #####:  872:        drawCard(currentPlayer, state);
call    0 never executed
        -:  873:
        -:  874:        //+1 Actions
    #####:  875:        state->numActions++;
        -:  876:
        -:  877:        //discard card from hand
    #####:  878:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  879:        return 0;
        -:  880:
        -:  881: 
        -:  882:
        -:  883:    case steward:
    #####:  884:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  885:        {
        -:  886:            //+2 cards
    #####:  887:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  888:            drawCard(currentPlayer, state);
call    0 never executed
        -:  889:        }
    #####:  890:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  891:        {
        -:  892:            //+2 coins
    #####:  893:            state->coins = state->coins + 2;
        -:  894:        }
        -:  895:        else
        -:  896:        {
        -:  897:            //trash 2 cards in hand
    #####:  898:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  899:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  900:        }
        -:  901:
        -:  902:        //discard card from hand
    #####:  903:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  904:        return 0;
        -:  905:
        -:  906: 
        -:  907: 
        -:  908:
        -:  909:    case cutpurse:
        -:  910:
    #####:  911:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  912:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  913:        {
    #####:  914:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  915:            {
    #####:  916:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  917:                {
    #####:  918:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  919:                    {
    #####:  920:                        discardCard(j, i, state, 0);
call    0 never executed
    #####:  921:                        break;
        -:  922:                    }
    #####:  923:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  924:                    {
    #####:  925:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  926:                        {
        -:  927:                            if (DEBUG)
        -:  928:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  929:                        }
    #####:  930:                        break;
        -:  931:                    }
        -:  932:                }
        -:  933:
        -:  934:            }
        -:  935:
        -:  936:        }
        -:  937:
        -:  938:        //discard played card from hand
    #####:  939:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  940:
    #####:  941:        return 0;
        -:  942:
        -:  943:
        -:  944:    case embargo:
        -:  945:        //+2 Coins
    #####:  946:        state->coins = state->coins + 2;
        -:  947:
        -:  948:        //see if selected pile is in play
    #####:  949:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  950:        {
    #####:  951:            return -1;
        -:  952:        }
        -:  953:
        -:  954:        //add embargo token to selected supply pile
    #####:  955:        state->embargoTokens[choice1]++;
        -:  956:
        -:  957:        //trash card
    #####:  958:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  959:        return 0;
        -:  960:
        -:  961:    case outpost:
        -:  962:        //set outpost flag
    #####:  963:        state->outpostPlayed++;
        -:  964:
        -:  965:        //discard card
    #####:  966:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  967:        return 0;
        -:  968:
        -:  969:    case salvager:
        -:  970:        //+1 buy
    #####:  971:        state->numBuys++;
        -:  972:
    #####:  973:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  974:        {
        -:  975:            //gain coins equal to trashed card
    #####:  976:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  977:            //trash card
    #####:  978:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  979:        }
        -:  980:
        -:  981:        //discard card
    #####:  982:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  983:        return 0;
        -:  984:
        -:  985:    case sea_hag:
    #####:  986:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  987:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  988:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  989:                state->deckCount[i]--;
    #####:  990:                state->discardCount[i]++;
    #####:  991:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  992:            }
        -:  993:        }
    #####:  994:        return 0;
        -:  995:
        -:  996:    case treasure_map:
        -:  997:        //search hand for another treasure_map
    #####:  998:        index = -1;
    #####:  999:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:        {
    #####: 1001:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1002:            {
    #####: 1003:                index = i;
    #####: 1004:                break;
        -: 1005:            }
        -: 1006:        }
    #####: 1007:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1008:        {
        -: 1009:            //trash both treasure cards
    #####: 1010:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1011:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1012:
        -: 1013:            //gain 4 Gold cards
    #####: 1014:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1015:            {
    #####: 1016:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1017:            }
        -: 1018:
        -: 1019:            //return success
    #####: 1020:            return 1;
        -: 1021:        }
        -: 1022:
        -: 1023:        //no second treasure_map found in hand
    #####: 1024:        return -1;
        -: 1025:    }
        -: 1026:
    #####: 1027:    return -1;
        -: 1028:}
        -: 1029:
        -: 1030://Assignment 2 refactors
function case_baron called 460 returned 100% blocks executed 92%
      460: 1031:int case_baron(int currentPlayer, int choice1, struct gameState *state){
      460: 1032:state->numBuys++;//Increase buys by 1!
      460: 1033:        if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
      235: 1034:            int p = 0;//Iterator for hand!
      235: 1035:            int card_not_discarded = 1;//Flag for discard set!
     1236: 1036:            while(card_not_discarded) {
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
      766: 1037:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      206: 1038:                    state->coins += 4;//Add 4 coins to the amount of coins
      206: 1039:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
      206: 1040:                    state->discardCount[currentPlayer]++;
      879: 1041:                    for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
      673: 1042:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1043:                    }
      206: 1044:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
      206: 1045:                    state->handCount[currentPlayer]--;
      206: 1046:                    card_not_discarded = 0;//Exit the loop
        -: 1047:                }
      560: 1048:                else if (p > state->handCount[currentPlayer]) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1049:                    if(DEBUG) {
        -: 1050:                        printf("No estate cards in your hand, invalid choice\n");
        -: 1051:                        printf("Must gain an estate if there are any\n");
        -: 1052:                    }
       29: 1053:                    if (supplyCount(estate, state) > 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       29: 1054:                        gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        -: 1055:
       29: 1056:                        state->supplyCount[estate]--;//Decrement estates
       29: 1057:                        if (supplyCount(estate, state) == 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1058:                            isGameOver(state);
call    0 never executed
        -: 1059:                        }
        -: 1060:                    }
       29: 1061:                    card_not_discarded = 0;//Exit the loop
        -: 1062:                }
        -: 1063:
        -: 1064:                else {
      531: 1065:                    p++;//Next card
        -: 1066:                }
        -: 1067:            }
        -: 1068:        }
        -: 1069:
        -: 1070:        else {
      225: 1071:            if (supplyCount(estate, state) > 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      225: 1072:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        -: 1073:
      225: 1074:                state->supplyCount[estate]--;//Decrement Estates
      225: 1075:                if (supplyCount(estate, state) == 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1076:                    isGameOver(state);
call    0 never executed
        -: 1077:                }
        -: 1078:            }
        -: 1079:        }
        -: 1080:
        -: 1081:
      460: 1082:        return 0;
        -: 1083:}
function case_minion called 400 returned 100% blocks executed 73%
      400: 1084:int case_minion(int currentPlayer, int handPos, int choice1, int choice2, struct gameState* state) {
        -: 1085:	//+1 action
      400: 1086:	state->numActions++;
        -: 1087:
        -: 1088:	//discard card from hand
      400: 1089:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1090:	int i, j;
      400: 1091:	if (choice1)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1092:	{
      205: 1093:		state->coins = state->coins + 2;
        -: 1094:	}
      195: 1095:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1096:	{
        -: 1097:		//discard hand
     1170: 1098:		while (numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
        -: 1099:		{
      780: 1100:			discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1101:		}
        -: 1102:
        -: 1103:		//draw 4
      975: 1104:		for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1105:		{
      780: 1106:			drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1107:		}
        -: 1108:
        -: 1109:		//other players discard hand and redraw if hand size > 4
      794: 1110:		for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1111:		{
      599: 1112:			if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1113:			{
      404: 1114:				if (state->handCount[i] > 4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1115:				{
        -: 1116:					//discard hand
    #####: 1117:					while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1118:					{
    #####: 1119:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1120:					}
        -: 1121:
        -: 1122:					//draw 4
    #####: 1123:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:					{
    #####: 1125:						drawCard(i, state);
call    0 never executed
        -: 1126:					}
        -: 1127:				}
        -: 1128:			}
        -: 1129:		}
        -: 1130:
        -: 1131:	}
      400: 1132:	return 0;
        -: 1133:}
function case_ambassador called 0 returned 0% blocks executed 0%
    #####: 1134:int case_ambassador(int currentPlayer, int choice1,int choice2, int handPos, struct gameState *state){
    #####: 1135:  int j = 0;		//used to check if player has enough cards to discard
        -: 1136:
    #####: 1137:        if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1138:        {
    #####: 1139:            return -1;
        -: 1140:        }
        -: 1141:
    #####: 1142:        if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1143:        {
    #####: 1144:            return -1;
        -: 1145:        }
        -: 1146:
    #####: 1147:        for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1148:        {
    #####: 1149:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1150:            {
    #####: 1151:                j++;
        -: 1152:            }
        -: 1153:        }
    #####: 1154:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1155:        {
    #####: 1156:            return -1;
        -: 1157:        }
        -: 1158:
        -: 1159:        if (DEBUG)
        -: 1160:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1161:
        -: 1162:        //increase supply count for choosen card by amount being discarded
    #####: 1163:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1164:
        -: 1165:        //each other player gains a copy of revealed card
    #####: 1166:        for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:        {
    #####: 1168:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1169:            {
    #####: 1170:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1171:            }
        -: 1172:        }
        -: 1173:
        -: 1174:        //discard played card from hand
    #####: 1175:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1176:
        -: 1177:        //trash copies of cards returned to supply
    #####: 1178:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1179:        {
    #####: 1180:            for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:            {
    #####: 1182:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1183:                {
    #####: 1184:                    discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1185:                    break;
        -: 1186:                }
        -: 1187:            }
        -: 1188:        }
        -: 1189:
    #####: 1190:        return 0;
        -: 1191:}
function case_tribute called 310 returned 100% blocks executed 73%
      310: 1192:int case_tribute(int currentPlayer,int nextPlayer,struct gameState *state,int tributeRevealedCards[]){
      310: 1193:     if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1194:            if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1195:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1196:                state->deckCount[nextPlayer]--;
        -: 1197:            }
    #####: 1198:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1199:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1200:                state->discardCount[nextPlayer]--;
        -: 1201:            }
        -: 1202:            else {
        -: 1203:                //No Card to Reveal
        -: 1204:                if (DEBUG) {
        -: 1205:                    printf("No cards to reveal\n");
        -: 1206:                }
        -: 1207:            }
        -: 1208:        }
        -: 1209:
        -: 1210:        else {
      310: 1211:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1212:                for (int i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1213:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1214:                    state->deckCount[nextPlayer]++;
    #####: 1215:                    state->discard[nextPlayer][i] = -1;
    #####: 1216:                    state->discardCount[nextPlayer]--;
        -: 1217:                }
        -: 1218:
    #####: 1219:                shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1220:            }
      310: 1221:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      310: 1222:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      310: 1223:            state->deckCount[nextPlayer]--;
      310: 1224:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      310: 1225:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      310: 1226:            state->deckCount[nextPlayer]--;
        -: 1227:        }
        -: 1228:
      310: 1229:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      209: 1230:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      209: 1231:            state->playedCardCount++;
      209: 1232:            tributeRevealedCards[1] = -1;
        -: 1233:        }
        -: 1234:
     1240: 1235:        for (int i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      930: 1236:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      393: 1237:                state->coins += 2;
        -: 1238:            }
        -: 1239:
      537: 1240:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 73% (fallthrough)
branch  3 taken 27%
branch  4 taken 68% (fallthrough)
branch  5 taken 32%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
      328: 1241:                drawCard(currentPlayer, state);
call    0 returned 100%
      328: 1242:                drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1243:            }
        -: 1244:            else { //Action Card
      209: 1245:                state->numActions = state->numActions + 2;
        -: 1246:            }
        -: 1247:        }
        -: 1248:
        -: 1249:        //bug 1: after tribute card has been played, there is no discard function to trash it. It will still be on the player's hand. 
        -: 1250:
      310: 1251:        return 0;
        -: 1252:}
function case_mine called 0 returned 0% blocks executed 0%
    #####: 1253:int case_mine(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state){
    #####: 1254: int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1255:
    #####: 1256:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1257:        {
    #####: 1258:            return -1;
        -: 1259:        }
        -: 1260:
    #####: 1261:        if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1262:        {
    #####: 1263:            return -1;
        -: 1264:        }
        -: 1265:
        -: 1266:        //bug 2: the code below is expected to return failure to use the card if the value of the treasure card chosen to trash +3 is "smaller than" the card to gain, but the code is "bigger than". It will return failure when the value of card to trash +3 is bigger than the card to gain.
    #####: 1267:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1268:        {
    #####: 1269:            return -1;
        -: 1270:        }
        -: 1271:
    #####: 1272:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1273:
        -: 1274:        //discard card from hand
    #####: 1275:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1276:
        -: 1277:        //discard trashed card
    #####: 1278:        for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1279:        {
    #####: 1280:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1281:            {
    #####: 1282:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1283:                break;
        -: 1284:            }
        -: 1285:        }
        -: 1286:
    #####: 1287:        return 0;
        -: 1288:}
        -: 1289:
        -: 1290:
        -: 1291:
function discardCard called 1180 returned 100% blocks executed 100%
     1180: 1292:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1293:{
        -: 1294:
        -: 1295:    //if card is not trashed, added to Played pile
     1180: 1296:    if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1297:    {
        -: 1298:        //add card to played pile
     1180: 1299:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1180: 1300:        state->playedCardCount++;
        -: 1301:    }
        -: 1302:
        -: 1303:    //set played card to -1
     1180: 1304:    state->hand[currentPlayer][handPos] = -1;
        -: 1305:
        -: 1306:    //remove card from player's hand
     1180: 1307:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1308:    {
        -: 1309:        //reduce number of cards in hand
      195: 1310:        state->handCount[currentPlayer]--;
        -: 1311:    }
      985: 1312:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1313:    {
        -: 1314:        //reduce number of cards in hand
      195: 1315:        state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:    else
        -: 1318:    {
        -: 1319:        //replace discarded card with last card in hand
      790: 1320:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1321:        //set last card to -1
      790: 1322:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1323:        //reduce number of cards in hand
      790: 1324:        state->handCount[currentPlayer]--;
        -: 1325:    }
        -: 1326:
     1180: 1327:    return 0;
        -: 1328:}
        -: 1329:
function gainCard called 254 returned 100% blocks executed 70%
      254: 1330:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1331:{
        -: 1332:    //Note: supplyPos is enum of choosen card
        -: 1333:
        -: 1334:    //check if supply pile is empty (0) or card is not used in game (-1)
      254: 1335:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1336:    {
    #####: 1337:        return -1;
        -: 1338:    }
        -: 1339:
        -: 1340:    //added card for [whoseTurn] current player:
        -: 1341:    // toFlag = 0 : add to discard
        -: 1342:    // toFlag = 1 : add to deck
        -: 1343:    // toFlag = 2 : add to hand
        -: 1344:
      254: 1345:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:    {
    #####: 1347:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1348:        state->deckCount[player]++;
        -: 1349:    }
      254: 1350:    else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1351:    {
    #####: 1352:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1353:        state->handCount[player]++;
        -: 1354:    }
        -: 1355:    else
        -: 1356:    {
      254: 1357:        state->discard[player][ state->discardCount[player] ] = supplyPos;
      254: 1358:        state->discardCount[player]++;
        -: 1359:    }
        -: 1360:
        -: 1361:    //decrease number in supply pile
      254: 1362:    state->supplyCount[supplyPos]--;
        -: 1363:
      254: 1364:    return 0;
        -: 1365:}
        -: 1366:
function updateCoins called 1265 returned 100% blocks executed 82%
     1265: 1367:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1368:{
        -: 1369:    int i;
        -: 1370:
        -: 1371:    //reset coin count
     1265: 1372:    state->coins = 0;
        -: 1373:
        -: 1374:    //add coins for each Treasure card in player's hand
     7590: 1375:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1376:    {
     6325: 1377:        if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1378:        {
     4938: 1379:            state->coins += 1;
        -: 1380:        }
     1387: 1381:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1382:        {
    #####: 1383:            state->coins += 2;
        -: 1384:        }
     1387: 1385:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1386:        {
    #####: 1387:            state->coins += 3;
        -: 1388:        }
        -: 1389:    }
        -: 1390:
        -: 1391:    //add bonus
     1265: 1392:    state->coins += bonus;
        -: 1393:
     1265: 1394:    return 0;
        -: 1395:}
        -: 1396:
        -: 1397:
        -: 1398://end of dominion.c
        -: 1399:
