        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 10374 returned 100% blocks executed 83%
    10374:    8:int compare(const void* a, const void* b) {
    10374:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        return 1;
    10374:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
     2470:   12:        return -1;
     7904:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 167 returned 100% blocks executed 97%
      167:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
      167:   44:    SelectStream(1);
call    0 returned 100%
      167:   45:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
      167:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
      167:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
     1827:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    18262:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    16602:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:            {
        1:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
      166:   73:    if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   74:    {
       56:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
      110:   77:    else if (numPlayers == 3)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        -:   78:    {
       58:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
       52:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
      166:   87:    if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   88:    {
       56:   89:        state->supplyCount[estate] = 8;
       56:   90:        state->supplyCount[duchy] = 8;
       56:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
      110:   95:        state->supplyCount[estate] = 12;
      110:   96:        state->supplyCount[duchy] = 12;
      110:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
      166:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
      166:  102:    state->supplyCount[silver] = 40;
      166:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
     3486:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    29003:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:  109:        {
    27103:  110:            if (kingdomCards[j] == i)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
     1420:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
        -:  114:                {
      602:  115:                    if (numPlayers == 2) {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
      101:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
      200:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
     1119:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
     1420:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
    25683:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
      660:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  141:    {
      494:  142:        state->deckCount[i] = 0;
     1976:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:        {
     1482:  145:            state->deck[i][j] = estate;
     1482:  146:            state->deckCount[i]++;
        -:  147:        }
     3952:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:        {
     3458:  150:            state->deck[i][j] = copper;
     3458:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
      660:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  157:    {
      494:  158:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
      660:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  166:    {
        -:  167:        //initialize hand size to zero
      494:  168:        state->handCount[i] = 0;
      494:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
     4648:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
     4482:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
      166:  184:    state->outpostPlayed = 0;
      166:  185:    state->phase = 0;
      166:  186:    state->numActions = 1;
      166:  187:    state->numBuys = 1;
      166:  188:    state->playedCardCount = 0;
      166:  189:    state->whoseTurn = 0;
      166:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
      996:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      830:  195:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:    }
        -:  197:
      166:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
      166:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 513 returned 100% blocks executed 100%
      513:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
      513:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
      513:  211:    if (state->deckCount[player] < 1)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       19:  212:        return -1;
      494:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     5928:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     4940:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     4940:  218:        newDeck[newDeckPos] = state->deck[player][card];
     4940:  219:        newDeckPos++;
    16267:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
    11327:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
     4940:  223:        state->deckCount[player]--;
        -:  224:    }
     5434:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     4940:  226:        state->deck[player][i] = newDeck[i];
     4940:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
      494:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
call    0 never executed
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:
    #####:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 130 returned 100% blocks executed 100%
      130:  313:int numHandCards(struct gameState *state) {
      130:  314:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 212 returned 100% blocks executed 100%
      212:  322:int supplyCount(int card, struct gameState *state) {
      212:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 280 returned 100% blocks executed 100%
      280:  348:int whoseTurn(struct gameState *state) {
      280:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 1105 returned 100% blocks executed 85%
     1105:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
     1105:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
       19:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
       19:  576:        state->deckCount[player] = state->discardCount[player];
       19:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
       19:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
       19:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
       19:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
       19:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
       19:  597:        if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       19:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
     1086:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
     1086:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
     1086:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1086:  614:        state->deckCount[player]--;
     1086:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
     1086:  618:    return 0;
        -:  619:}
        -:  620:
function getCost called 8 returned 100% blocks executed 17%
        8:  621:int getCost(int cardNumber)
        -:  622:{
        8:  623:    switch( cardNumber )
branch  0 taken 13%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 75%
branch  5 taken 0%
branch  6 taken 13%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
        1:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
        6:  634:        return 0;
        -:  635:    case silver:
    #####:  636:        return 3;
        -:  637:    case gold:
        1:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        -:  682:}
        -:  683:
function baronCard called 53 returned 100% blocks executed 92%
       53:  684:int baronCard(int choice1, int currentPlayer, struct gameState *state){
        -:  685:    // state->numBuys++;//Increase buys by 1!
        -:  686:    // bug that I introduced adds 3 more buys instead of 1, shouldn't break the game
       53:  687:    state->numBuys = state->numBuys + 3; 
       53:  688:    if (choice1 > 0) //Boolean true or going to discard an estate
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:  689:    { 
       18:  690:        int p = 0; //Iterator for hand!
       18:  691:        int card_not_discarded = 1;//Flag for discard set!
       93:  692:        while(card_not_discarded) 
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  693:        {
       57:  694:            if (state->hand[currentPlayer][p] == estate) //Found an estate card!
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:  695:            { 
       17:  696:                state->coins += 4;//Add 4 coins to the amount of coins
       17:  697:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
       17:  698:                state->discardCount[currentPlayer]++;
       69:  699:                for (; p < state->handCount[currentPlayer]; p++) // possibley needs to a declaration for p in the loop
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  700:                { 
       52:  701:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  702:                }
       17:  703:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
       17:  704:                state->handCount[currentPlayer]--;
       17:  705:                card_not_discarded = 0;//Exit the loop
        -:  706:            }
       40:  707:            else if (p > state->handCount[currentPlayer]) 
branch  0 taken 3% (fallthrough)
branch  1 taken 98%
        -:  708:            {
        -:  709:                if(DEBUG) 
        -:  710:                {
        -:  711:                    printf("No estate cards in your hand, invalid choice\n");
        -:  712:                    printf("Must gain an estate if there are any\n");
        -:  713:                }
        1:  714:                if (supplyCount(estate, state) > 0) 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  715:                {
        1:  716:                    gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        -:  717:
        1:  718:                    state->supplyCount[estate]--;//Decrement estates
        1:  719:                    if (supplyCount(estate, state) == 0) 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  720:                    {
    #####:  721:                        isGameOver(state);
call    0 never executed
        -:  722:                    }
        -:  723:                }
        1:  724:                card_not_discarded = 0;//Exit the loop
        -:  725:            }
        -:  726:
        -:  727:            else 
       39:  728:                p++;//Next card
        -:  729:        }
        -:  730:        // still needs to delete the card from the hand once the card is played a bugg
        -:  731:    }
        -:  732:
        -:  733:    else 
        -:  734:    {
       35:  735:        if (supplyCount(estate, state) > 0) 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  736:        {
       35:  737:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        -:  738:
        -:  739:            // state->supplyCount[estate]--;//Decrement Estates
        -:  740:            // this card will not decrement the estate pile like it should in this part
        -:  741:            // instead it will add an estate card. 
       35:  742:            state->supplyCount[estate]++;
       35:  743:            if (supplyCount(estate, state) == 0) 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  744:            {
    #####:  745:                isGameOver(state);
call    0 never executed
        -:  746:            }
        -:  747:        }
        -:  748:    }
        -:  749:
       53:  750:    return 0;
        -:  751:}
        -:  752:
function minionCard called 50 returned 100% blocks executed 73%
       50:  753:int minionCard(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state){
        -:  754:    
        -:  755:    int i, j; // added these so that I dont have to pass them in 
       50:  756:    state->numActions++; //+1 action
        -:  757:
        -:  758:    //discard card from hand
       50:  759:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  760:
       50:  761:    if (choice1)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -:  762:    {
        -:  763:        // state->coins = state->coins + 2;
       24:  764:        state->coins = state->coins + 7;
        -:  765:        // the new bug that I added here was increase the amount of coins the card grants 
        -:  766:    }
       26:  767:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  768:    {
        -:  769:        //discard hand
      156:  770:        while(numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
        -:  771:        {
      104:  772:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  773:        }
        -:  774:
        -:  775:        //draw 4
      130:  776:        for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  777:        {
      104:  778:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  779:        }
        -:  780:
        -:  781:        //other players discard hand and redraw if hand size > 4
      103:  782:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  783:        {
       77:  784:            if (i != currentPlayer)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -:  785:            {
        -:  786:                // if ( state->handCount[i] > 4 )
        -:  787:                // {
        -:  788:                // introduction a bug that will get make players with more than 2 cards 
       51:  789:                if ( state->handCount[i] > 2 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  790:                {
        -:  791:                    //discard hand
    #####:  792:                    while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:                    {
    #####:  794:                        discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:                    }
        -:  796:
        -:  797:                    //draw 4
    #####:  798:                    for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:                    {
    #####:  800:                        drawCard(i, state);
call    0 never executed
        -:  801:                    }
        -:  802:                }
        -:  803:            }
        -:  804:        }
        -:  805:
        -:  806:    }
       50:  807:    return 0;
        -:  808:}
function ambassadorCard called 5 returned 100% blocks executed 45%
        5:  809:int ambassadorCard(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state){
        5:  810:        int i, j = 0;		// j is used to check if player has enough cards to discard
        -:  811:
        5:  812:        if (choice2 > 2 || choice2 < 0)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:  813:        {
        2:  814:            return -1;
        -:  815:        }
        -:  816:
        3:  817:        if (choice1 == handPos)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  818:        {
        1:  819:            return -1;
        -:  820:        }
        -:  821:
387389214:  822:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  823:        {
387389212:  824:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  825:            {
        1:  826:                j++;
        -:  827:            }
        -:  828:        }
        2:  829:        if (j < choice2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  830:        {
        2:  831:            return -1;
        -:  832:        }
        -:  833:
        -:  834:        if (DEBUG)
        -:  835:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  836:
        -:  837:        //increase supply count for choosen card by amount being discarded
        -:  838:        // state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  839:        // inceasing the supply count of the revealed card by 2 more of the revealed card
        -:  840:
    #####:  841:        printf("%d\n", state->supplyCount[curse]);
call    0 never executed
    #####:  842:        printf("%d %d %d\n", choice1, choice2, handPos);
call    0 never executed
    #####:  843:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2 + 2;
        -:  844:
    #####:  845:        printf("%d\n", state->supplyCount[state->hand[currentPlayer][choice1]]);
call    0 never executed
        -:  846:
        -:  847:
        -:  848:        //each other player gains a copy of revealed card
    #####:  849:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  850:        {
        -:  851:            // if (i != currentPlayer)
        -:  852:            // {
        -:  853:            // I took out the conditional that will skip the current player now the current player
        -:  854:            // will get the the same revealed card are the other players.
    #####:  855:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  856:        //}
        -:  857:            
        -:  858:        }
        -:  859:
    #####:  860:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  861:
        -:  862:        //trash copies of cards returned to supply
    #####:  863:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  864:        {
    #####:  865:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  866:            {
    #####:  867:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  868:                {
    #####:  869:                    discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  870:                    break;
        -:  871:                }
        -:  872:            }
        -:  873:        }
        -:  874:
    #####:  875:        return 0;
        -:  876:}
function tributeCard called 53 returned 100% blocks executed 74%
       53:  877:int tributeCard(int nextPlayer, int currentPlayer, struct gameState *state, int *tributeRevealedCards){
        -:  878:    int i;
       53:  879:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  880:    {
    #####:  881:        if (state->deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -:  882:        {
    #####:  883:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  884:            state->deckCount[nextPlayer]--;
        -:  885:        }
    #####:  886:        else if (state->discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -:  887:        {
    #####:  888:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:            state->discardCount[nextPlayer]--;
        -:  890:        }
        -:  891:        else 
        -:  892:        {
        -:  893:            //No Card to Reveal
        -:  894:            if (DEBUG) 
        -:  895:            {
        -:  896:                printf("No cards to reveal\n");
        -:  897:            }
        -:  898:        }
        -:  899:    }
        -:  900:    // at some point we are going to need to add cases for them the onese that are not zero and such
        -:  901:    else 
        -:  902:    {
       53:  903:        if (state->deckCount[nextPlayer] == 0) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  904:        {
    #####:  905:            for (i = 0; i < state->discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  906:            {
    #####:  907:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:                state->deckCount[nextPlayer]++;
    #####:  909:                state->discard[nextPlayer][i] = -1;
    #####:  910:                state->discardCount[nextPlayer]--;
        -:  911:            }
        -:  912:
    #####:  913:            shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  914:        }
       53:  915:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       53:  916:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       53:  917:        state->deckCount[nextPlayer]--;
       53:  918:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       53:  919:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       53:  920:        state->deckCount[nextPlayer]--;
        -:  921:    }
        -:  922:
        -:  923:    // if (tributeRevealedCards[0] == tributeRevealedCards[1]) //If we have a duplicate card, just drop one
        -:  924:    // { 
        -:  925:    // this bug that I created is will get rid of no duplicate cards, specifically the 2nd card.
        -:  926:    // it will keep the duplicated to double the rewards of the bonus that comes from the card
       53:  927:    if (tributeRevealedCards[0] != tributeRevealedCards[1]) 
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
        -:  928:    { 
       22:  929:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       22:  930:        state->playedCardCount++;
       22:  931:        tributeRevealedCards[1] = -1;
        -:  932:    }
        -:  933:
      212:  934:    for (i = 0; i <= 2; i ++) 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  935:    {
      159:  936:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) //Treasure cards
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  937:        { 
       80:  938:            state->coins += 2;
        -:  939:        }
        -:  940:
      101:  941:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || 
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
branch  4 taken 52% (fallthrough)
branch  5 taken 48%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       44:  942:                 tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       57:  943:            drawCard(currentPlayer, state);
call    0 returned 100%
       57:  944:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  945:
        -:  946:            // added an extra draw card from this bonus
       57:  947:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  948:        }
        -:  949:        else 
        -:  950:        { //Action Card
       22:  951:            state->numActions = state->numActions + 2;
        -:  952:        }
        -:  953:    }
        -:  954:
       53:  955:    return 0;
        -:  956:}
function mineCard called 6 returned 100% blocks executed 90%
        6:  957:int mineCard(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state){
        -:  958:        int i;
        6:  959:        int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  960:
        6:  961:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  962:        {
        2:  963:            return -1;
        -:  964:        }
        -:  965:
        4:  966:        if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  967:        {
    #####:  968:            return -1;
        -:  969:        }
        -:  970:
        -:  971:
        -:  972:        // if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  973:        // now the new big will allow the uses to buy gold from trading in copper as very broken card
        4:  974:        if ( getCost(state->hand[currentPlayer][choice1]) + 5 > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
        -:  975:        {
        3:  976:            return -1;
        -:  977:        }
        -:  978:
        -:  979:        
        -:  980:
        1:  981:        gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  982:
        -:  983:        // the player will gain 2 card that they wanted instead of the just 1
        1:  984:        gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  985:
        -:  986:        //discard card from hand
        1:  987:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  988:
        -:  989:        //discard trashed card
        1:  990:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  991:        {
        1:  992:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  993:            {
        1:  994:                discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        1:  995:                break;
        -:  996:            }
        -:  997:        }
        -:  998:
        1:  999:        return 0;
        -: 1000:}
        -: 1001:
function cardEffect called 0 returned 0% blocks executed 0%
    #####: 1002:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1003:{
        -: 1004:    int i;
        -: 1005:    int j;
        -: 1006:    int k;
        -: 1007:    int x;
        -: 1008:    int index;
    #####: 1009:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1010:    int nextPlayer = currentPlayer + 1;
        -: 1011:
    #####: 1012:    int tributeRevealedCards[2] = {-1, -1};
        -: 1013:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1014:    int drawntreasure=0;
        -: 1015:    int cardDrawn;
    #####: 1016:    int z = 0;// this is the counter for the temp hand
    #####: 1017:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####: 1018:        nextPlayer = 0;
        -: 1019:    }
        -: 1020:
        -: 1021:
        -: 1022:    //uses switch to select card and perform actions
    #####: 1023:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -: 1024:    {
        -: 1025:    case adventurer:
    #####: 1026:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####: 1027:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1028:                shuffle(currentPlayer, state);
call    0 never executed
        -: 1029:            }
    #####: 1030:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1032:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1033:                drawntreasure++;
        -: 1034:            else {
    #####: 1035:                temphand[z]=cardDrawn;
    #####: 1036:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1037:                z++;
        -: 1038:            }
        -: 1039:        }
    #####: 1040:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####: 1041:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1042:            z=z-1;
        -: 1043:        }
    #####: 1044:        return 0;
        -: 1045:
        -: 1046:    case council_room:
        -: 1047:        //+4 Cards
    #####: 1048:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1049:        {
    #####: 1050:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1051:        }
        -: 1052:
        -: 1053:        //+1 Buy
    #####: 1054:        state->numBuys++;
        -: 1055:
        -: 1056:        //Each other player draws a card
    #####: 1057:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1058:        {
    #####: 1059:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1060:            {
    #####: 1061:                drawCard(i, state);
call    0 never executed
        -: 1062:            }
        -: 1063:        }
        -: 1064:
        -: 1065:        //put played card in played card pile
    #####: 1066:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1067:
    #####: 1068:        return 0;
        -: 1069:
        -: 1070:    case feast:
        -: 1071:        //gain card with cost up to 5
        -: 1072:        //Backup hand
    #####: 1073:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1074:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1075:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1076:        }
        -: 1077:        //Backup hand
        -: 1078:
        -: 1079:        //Update Coins for Buy
    #####: 1080:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1081:        x = 1;//Condition to loop on
    #####: 1082:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1083:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:                if (DEBUG)
        -: 1085:                    printf("None of that card left, sorry!\n");
        -: 1086:
        -: 1087:                if (DEBUG) {
        -: 1088:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1089:                }
        -: 1090:            }
    #####: 1091:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1092:                printf("That card is too expensive!\n");
call    0 never executed
        -: 1093:
        -: 1094:                if (DEBUG) {
        -: 1095:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1096:                }
        -: 1097:            }
        -: 1098:            else {
        -: 1099:
        -: 1100:                if (DEBUG) {
        -: 1101:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1102:                }
        -: 1103:
    #####: 1104:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1105:                x = 0;//No more buying cards
        -: 1106:
        -: 1107:                if (DEBUG) {
        -: 1108:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1109:                }
        -: 1110:
        -: 1111:            }
        -: 1112:        }
        -: 1113:
        -: 1114:        //Reset Hand
    #####: 1115:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1116:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1117:            temphand[i] = -1;
        -: 1118:        }
        -: 1119:        //Reset Hand
        -: 1120:
    #####: 1121:        return 0;
        -: 1122:
        -: 1123:    case gardens:
    #####: 1124:        return -1;
        -: 1125:
        -: 1126:    case mine:
    #####: 1127:        return mineCard(choice1, choice2, currentPlayer, handPos, state);
call    0 never executed
        -: 1128:
        -: 1129:    case remodel:
    #####: 1130:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1131:
    #####: 1132:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:        {
    #####: 1134:            return -1;
        -: 1135:        }
        -: 1136:
    #####: 1137:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1138:
        -: 1139:        //discard card from hand
    #####: 1140:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1141:
        -: 1142:        //discard trashed card
    #####: 1143:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1148:                break;
        -: 1149:            }
        -: 1150:        }
        -: 1151:
        -: 1152:
    #####: 1153:        return 0;
        -: 1154:
        -: 1155:    case smithy:
        -: 1156:        //+3 Cards
    #####: 1157:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:        {
    #####: 1159:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1160:        }
        -: 1161:
        -: 1162:        //discard card from hand
    #####: 1163:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:        return 0;
        -: 1165:
        -: 1166:    case village:
        -: 1167:        //+1 Card
    #####: 1168:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1169:
        -: 1170:        //+2 Actions
    #####: 1171:        state->numActions = state->numActions + 2;
        -: 1172:
        -: 1173:        //discard played card from hand
    #####: 1174:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1175:        return 0;
        -: 1176:
        -: 1177:    case baron:
    #####: 1178:        return baronCard(choice1, currentPlayer, state); // calls the baronCard Function
call    0 never executed
        -: 1179:  
        -: 1180:    case great_hall:
        -: 1181:        //+1 Card
    #####: 1182:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1183:
        -: 1184:        //+1 Actions
    #####: 1185:        state->numActions++;
        -: 1186:
        -: 1187:        //discard card from hand
    #####: 1188:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1189:        return 0;
        -: 1190:
        -: 1191:    case minion:
    #####: 1192:        return minionCard(choice1, choice2, currentPlayer, handPos, state);
call    0 never executed
        -: 1193:       
        -: 1194:    case steward:
    #####: 1195:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1196:        {
        -: 1197:            //+2 cards
    #####: 1198:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1199:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1200:        }
    #####: 1201:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1202:        {
        -: 1203:            //+2 coins
    #####: 1204:            state->coins = state->coins + 2;
        -: 1205:        }
        -: 1206:        else
        -: 1207:        {
        -: 1208:            //trash 2 cards in hand
    #####: 1209:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1210:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1211:        }
        -: 1212:
        -: 1213:        //discard card from hand
    #####: 1214:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1215:        return 0;
        -: 1216:
        -: 1217:    case tribute:
    #####: 1218:       return tributeCard(nextPlayer, currentPlayer, state, tributeRevealedCards);
call    0 never executed
        -: 1219:
        -: 1220:    case ambassador:
    #####: 1221:        return ambassadorCard(choice1, choice2, currentPlayer,handPos, state);
call    0 never executed
        -: 1222:
        -: 1223:    case cutpurse:
        -: 1224:
    #####: 1225:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1226:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1227:        {
    #####: 1228:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1229:            {
    #####: 1230:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1231:                {
    #####: 1232:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1233:                    {
    #####: 1234:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1235:                        break;
        -: 1236:                    }
    #####: 1237:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1238:                    {
    #####: 1239:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1240:                        {
        -: 1241:                            if (DEBUG)
        -: 1242:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:                        }
    #####: 1244:                        break;
        -: 1245:                    }
        -: 1246:                }
        -: 1247:
        -: 1248:            }
        -: 1249:
        -: 1250:        }
        -: 1251:
        -: 1252:        //discard played card from hand
    #####: 1253:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1254:
    #####: 1255:        return 0;
        -: 1256:
        -: 1257:
        -: 1258:    case embargo:
        -: 1259:        //+2 Coins
    #####: 1260:        state->coins = state->coins + 2;
        -: 1261:
        -: 1262:        //see if selected pile is in play
    #####: 1263:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1264:        {
    #####: 1265:            return -1;
        -: 1266:        }
        -: 1267:
        -: 1268:        //add embargo token to selected supply pile
    #####: 1269:        state->embargoTokens[choice1]++;
        -: 1270:
        -: 1271:        //trash card
    #####: 1272:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1273:        return 0;
        -: 1274:
        -: 1275:    case outpost:
        -: 1276:        //set outpost flag
    #####: 1277:        state->outpostPlayed++;
        -: 1278:
        -: 1279:        //discard card
    #####: 1280:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1281:        return 0;
        -: 1282:
        -: 1283:    case salvager:
        -: 1284:        //+1 buy
    #####: 1285:        state->numBuys++;
        -: 1286:
    #####: 1287:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1288:        {
        -: 1289:            //gain coins equal to trashed card
    #####: 1290:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1291:            //trash card
    #####: 1292:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1293:        }
        -: 1294:
        -: 1295:        //discard card
    #####: 1296:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1297:        return 0;
        -: 1298:
        -: 1299:    case sea_hag:
    #####: 1300:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1301:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1302:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1303:                state->deckCount[i]--;
    #####: 1304:                state->discardCount[i]++;
    #####: 1305:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1306:            }
        -: 1307:        }
    #####: 1308:        return 0;
        -: 1309:
        -: 1310:    case treasure_map:
        -: 1311:        //search hand for another treasure_map
    #####: 1312:        index = -1;
    #####: 1313:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1314:        {
    #####: 1315:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1316:            {
    #####: 1317:                index = i;
    #####: 1318:                break;
        -: 1319:            }
        -: 1320:        }
    #####: 1321:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1322:        {
        -: 1323:            //trash both treasure cards
    #####: 1324:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1325:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1326:
        -: 1327:            //gain 4 Gold cards
    #####: 1328:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1329:            {
    #####: 1330:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1331:            }
        -: 1332:
        -: 1333:            //return success
    #####: 1334:            return 1;
        -: 1335:        }
        -: 1336:
        -: 1337:        //no second treasure_map found in hand
    #####: 1338:        return -1;
        -: 1339:    }
        -: 1340:
    #####: 1341:    return -1;
        -: 1342:}
        -: 1343:
function discardCard called 156 returned 100% blocks executed 100%
      156: 1344:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1345:{
        -: 1346:
        -: 1347:    //if card is not trashed, added to Played pile
      156: 1348:    if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1349:    {
        -: 1350:        //add card to played pile
      156: 1351:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      156: 1352:        state->playedCardCount++;
        -: 1353:    }
        -: 1354:
        -: 1355:    //set played card to -1
      156: 1356:    state->hand[currentPlayer][handPos] = -1;
        -: 1357:
        -: 1358:    //remove card from player's hand
      156: 1359:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1360:    {
        -: 1361:        //reduce number of cards in hand
       26: 1362:        state->handCount[currentPlayer]--;
        -: 1363:    }
      130: 1364:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1365:    {
        -: 1366:        //reduce number of cards in hand
       26: 1367:        state->handCount[currentPlayer]--;
        -: 1368:    }
        -: 1369:    else
        -: 1370:    {
        -: 1371:        //replace discarded card with last card in hand
      104: 1372:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1373:        //set last card to -1
      104: 1374:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1375:        //reduce number of cards in hand
      104: 1376:        state->handCount[currentPlayer]--;
        -: 1377:    }
        -: 1378:
      156: 1379:    return 0;
        -: 1380:}
        -: 1381:
function gainCard called 38 returned 100% blocks executed 80%
       38: 1382:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1383:{
        -: 1384:    //Note: supplyPos is enum of choosen card
        -: 1385:
        -: 1386:    //check if supply pile is empty (0) or card is not used in game (-1)
       38: 1387:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1388:    {
    #####: 1389:        return -1;
        -: 1390:    }
        -: 1391:
        -: 1392:    //added card for [whoseTurn] current player:
        -: 1393:    // toFlag = 0 : add to discard
        -: 1394:    // toFlag = 1 : add to deck
        -: 1395:    // toFlag = 2 : add to hand
        -: 1396:
       38: 1397:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1398:    {
    #####: 1399:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1400:        state->deckCount[player]++;
        -: 1401:    }
       38: 1402:    else if (toFlag == 2)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1403:    {
        2: 1404:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1405:        state->handCount[player]++;
        -: 1406:    }
        -: 1407:    else
        -: 1408:    {
       36: 1409:        state->discard[player][ state->discardCount[player] ] = supplyPos;
       36: 1410:        state->discardCount[player]++;
        -: 1411:    }
        -: 1412:
        -: 1413:    //decrease number in supply pile
       38: 1414:    state->supplyCount[supplyPos]--;
        -: 1415:
       38: 1416:    return 0;
        -: 1417:}
        -: 1418:
function updateCoins called 166 returned 100% blocks executed 82%
      166: 1419:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1420:{
        -: 1421:    int i;
        -: 1422:
        -: 1423:    //reset coin count
      166: 1424:    state->coins = 0;
        -: 1425:
        -: 1426:    //add coins for each Treasure card in player's hand
      996: 1427:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1428:    {
      830: 1429:        if (state->hand[player][i] == copper)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -: 1430:        {
      616: 1431:            state->coins += 1;
        -: 1432:        }
      214: 1433:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1434:        {
    #####: 1435:            state->coins += 2;
        -: 1436:        }
      214: 1437:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1438:        {
    #####: 1439:            state->coins += 3;
        -: 1440:        }
        -: 1441:    }
        -: 1442:
        -: 1443:    //add bonus
      166: 1444:    state->coins += bonus;
        -: 1445:
      166: 1446:    return 0;
        -: 1447:}
        -: 1448:
        -: 1449:
        -: 1450://end of dominion.c
        -: 1451:
